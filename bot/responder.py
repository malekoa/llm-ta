import re
from typing import List, Tuple
from openai import OpenAI
from bot.config import Config


class Responder:
    """
    Handles generating AI-based email replies and formatting the
    HTML footer for feedback links.
    """

    HTML_HEADER = f"""
<!-- footer-start -->
<div style="margin-bottom: 20px; padding: 12px; background-color: #e0e0e0; color: #333; font-size: 0.75rem; border-left: 4px solid #555;">
  <p style="margin: 0 0 6px 0;">
    <strong>Disclaimer:</strong> This response was generated by an AI assistant and may contain errors. Please verify all information before relying on it.
  </p>
  <p style="margin: 0;">
    Was this response helpful?
    <a href="{Config.BASE_URL}/feedback?vote=up&message_id=MESSAGE_ID_PLACEHOLDER">üëç Yes</a>
    <a href="{Config.BASE_URL}/feedback?vote=down&message_id=MESSAGE_ID_PLACEHOLDER" style="margin-left: 10px;">üëé No</a>
  </p>
</div>
<!-- footer-end -->
"""

    def __init__(self):
        """
        Initialize the OpenAI client using the API key from configuration.
        """
        self.client = OpenAI(api_key=Config.OPENAI_API_KEY)

    def generate(self, subject: str, thread_messages: List[Tuple[str, str, int]]) -> str:
        """
        Generate an HTML-formatted reply by sending the conversation history
        to OpenAI's chat completion endpoint.

        :param subject: The email subject line (for context if needed)
        :param thread_messages: List of tuples (sender_id, body, is_from_bot)
        :return: An HTML string containing the AI-generated reply content.
        """
        system_prompt = {
            "role": "system",
            "content": (
                "You are a helpful teaching assistant who replies in polite HTML "
                "using <p>, <strong>, and <ul> as needed. Avoid inline styles. "
                "Sign off every email with 'Best, AutoTA' in a new line."
            )
        }
        messages = [system_prompt]

        # Build the chat history for OpenAI
        for sender_id, body, is_from_bot in thread_messages:
            role = "assistant" if is_from_bot else "user"
            messages.append({"role": role, "content": body})

        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=messages,
                max_tokens=300,
                temperature=0.7,
            )
            content = response.choices[0].message.content
            return content.strip() if isinstance(content, str) else (
                "Thank you for your email. I'll get back to you shortly."
            )

        except Exception as e:
            # Log error and return a fallback message
            print("Error generating response:", e)
            return "Thank you for your email. I'll get back to you shortly."

    def remove_previous_footer(self, body: str) -> str:
        """
        Strip out any existing disclaimer blocks to avoid duplicates.

        :param body: The raw HTML or text body of a previous reply
        :return: The cleaned body without footer HTML.
        """
        pattern = re.compile(r'<!-- footer-start -->.*?<!-- footer-end -->', re.DOTALL)
        return pattern.sub('', body).strip()
